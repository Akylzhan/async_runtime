        -:    0:Source:/home/df/Documents/workspace/async_runtime/src/executor.cpp
        -:    0:Graph:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/CMakeFiles/ar.dir/src/executor.cpp.gcno
        -:    0:Data:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/CMakeFiles/ar.dir/src/executor.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "ar/executor.hpp"
        -:    2:
        -:    3:
        -:    4:using namespace AsyncRuntime;
        -:    5:
        -:    6:
function _ZN12AsyncRuntime8ExecutorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 1 returned 100% blocks executed 53%
        1:    7:Executor::Executor(const std::string & name_, int max_processors_count_) :
        1:    8:            name(name_),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:    9:            notify_inc(0),
        1:   10:            max_processors_count(max_processors_count_)
        1:   10-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   10-block  1
call    4 returned 1
call    5 returned 1
        -:   11:{
        1:   12:    Spawn();
        1:   12-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   13:}
        1:   13-block  0
    $$$$$:   13-block  1
call    0 never executed
    $$$$$:   13-block  2
call    1 never executed
    $$$$$:   13-block  3
call    2 never executed
    $$$$$:   13-block  4
call    3 never executed
        -:   14:
        -:   15:
        2:   16:Executor::~Executor()
        -:   17:{
       17:   18:    for(auto & processor : processors)
        -:   19:    {
       16:   20:        processor->Terminate();
       16:   21:        delete processor;
       16:   22:        processor = nullptr;
        -:   23:    }
        1:   24:    processors.clear();
        2:   25:}
------------------
_ZN12AsyncRuntime8ExecutorD0Ev:
function _ZN12AsyncRuntime8ExecutorD0Ev called 1 returned 100% blocks executed 100%
        1:   16:Executor::~Executor()
        -:   17:{
        -:   18:    for(auto & processor : processors)
        -:   19:    {
        -:   20:        processor->Terminate();
        -:   21:        delete processor;
        -:   22:        processor = nullptr;
        -:   23:    }
        -:   24:    processors.clear();
        1:   25:}
        1:   25-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN12AsyncRuntime8ExecutorD2Ev:
function _ZN12AsyncRuntime8ExecutorD2Ev called 1 returned 100% blocks executed 100%
        1:   16:Executor::~Executor()
        -:   17:{
       17:   18:    for(auto & processor : processors)
        1:   18-block  0
call    0 returned 1
call    1 returned 1
       16:   18-block  1
call    2 returned 16
       17:   18-block  2
call    3 returned 17
branch  4 taken 16
branch  5 taken 1 (fallthrough)
        -:   19:    {
       16:   20:        processor->Terminate();
call    0 returned 16
       16:   21:        delete processor;
branch  0 taken 16 (fallthrough)
branch  1 taken 0
       16:   21-block  0
call    2 returned 16
       16:   22:        processor = nullptr;
       16:   22-block  0
call    0 returned 16
        -:   23:    }
        1:   24:    processors.clear();
        1:   24-block  0
call    0 returned 1
        1:   25:}
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
------------------
        -:   26:
        -:   27:
function _ZN12AsyncRuntime8Executor5SpawnEv called 1 returned 100% blocks executed 83%
        1:   28:void Executor::Spawn()
        -:   29:{
       17:   30:    for(int i = 0; i < max_processors_count; ++i) {
        1:   30-block  0
       16:   30-block  1
       17:   30-block  2
branch  0 taken 16
branch  1 taken 1 (fallthrough)
       16:   31:        auto *processor = new Processor(this);
       16:   31-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
       16:   31-block  1
call    3 returned 16
branch  4 taken 16 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   31-block  2
call    6 never executed
       16:   32:        processors.emplace_back(processor);
       16:   32-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
        -:   33:    }
        -:   34:
        -:   35:
       17:   36:    for(auto *processor : processors){
        1:   36-block  0
call    0 returned 1
call    1 returned 1
       16:   36-block  1
call    2 returned 16
       16:   36-block  2
call    3 returned 16
       17:   36-block  3
call    4 returned 17
branch  5 taken 16
branch  6 taken 1 (fallthrough)
       16:   37:        processor->Run();
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
        -:   38:    }
        1:   39:}
        1:   39-block  0
        -:   40:
        -:   41:
function _ZN12AsyncRuntime8Executor4PostEPNS_4TaskE called 5 returned 100% blocks executed 84%
        5:   42:void Executor::Post(Task *task)
        -:   43:{
        5:   44:    const auto& execute_state = task->GetDesirableExecutor();
        5:   44-block  0
call    0 returned 5
        5:   45:    if(execute_state.processor != nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:   46:        Processor * processor = execute_state.processor;
        4:   47:        processor->Post(task);
        4:   47-block  0
call    0 returned 4
        -:   48:    }else{
        1:   49:        RunQueuePush(task);
        1:   49-block  0
call    0 returned 1
        -:   50:
        1:   51:        bool notified = false;
       1*:   52:        for(size_t i = 0; i < processors.size(); ++i) {
    %%%%%:   52-block  0
        1:   52-block  1
call    0 returned 1
branch  1 taken 1
branch  2 taken 0 (fallthrough)
        1:   53:            notify_inc = (notify_inc + 1) % processors.size();
        1:   53-block  0
call    0 returned 1
        1:   54:            size_t pid = notify_inc;
        -:   55:
        1:   56:            auto p_state = processors[pid]->GetState();
call    0 returned 1
call    1 returned 1
        1:   57:            if(p_state != Processor::EXECUTE) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   58:                notified = true;
        1:   59:                processors[pid]->Notify();
        1:   59-block  0
call    0 returned 1
call    1 returned 1
        1:   60:                break;
        -:   61:            }
        -:   62:        }
        -:   63:
        1:   64:        if(!notified) {
        1:   64-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   65:            processors[notify_inc]->Notify();
    %%%%%:   65-block  0
call    0 never executed
call    1 never executed
        -:   66:        }
        -:   67:    }
        5:   68:}
        -:   69:
        -:   70:
function _ZN12AsyncRuntime8Executor12RunQueuePushEPNS_4TaskE called 1 returned 100% blocks executed 71%
        1:   71:void Executor::RunQueuePush(Task *task)
        -:   72:{
        1:   73:    std::lock_guard<std::mutex> lock(run_queue_mutex);
        1:   73-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   74:    run_queue.push(task);
        1:   74-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   75:}
        1:   75-block  0
call    0 returned 1
    $$$$$:   75-block  1
call    1 never executed
