        -:    0:Source:/home/df/Documents/workspace/async_runtime/include/ar/stream.hpp
        -:    0:Graph:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/examples/CMakeFiles/tcp_client.dir/tcp_client.cpp.gcno
        -:    0:Data:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/examples/CMakeFiles/tcp_client.dir/tcp_client.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef AR_STREAM_HPP
        -:    2:#define AR_STREAM_HPP
        -:    3:
        -:    4:
        -:    5:#include "ar/task.hpp"
        -:    6:#include "uv.h"
        -:    7:
        -:    8:
        -:    9:#ifdef USE_TESTS
        -:   10:class STREAM_TEST_FRIEND;
        -:   11:#endif
        -:   12:
        -:   13:
        -:   14:namespace AsyncRuntime {
        -:   15:
        -:   16:    /**
        -:   17:     * @brief i/o file stream
        -:   18:     * @class IOFsStream
        -:   19:     */
        -:   20:    class IOStream {
        -:   21:        friend class Task;
        -:   22:
        -:   23:#ifdef USE_TESTS
        -:   24:        friend STREAM_TEST_FRIEND;
        -:   25:#endif
        -:   26:
        -:   27:    public:
        -:   28:        enum Mode { W,R };
        -:   29:
        -:   30:
        -:   31:        IOStream();
        -:   32:        IOStream(const char* buf, int64_t len);
        -:   33:        ~IOStream();
        -:   34:
        -:   35:
        -:   36:        void Flush();
        -:   37:
        -:   38:
        -:   39:        /**
        -:   40:         * @brief set file descriptor
        -:   41:         * @param file - file descriptor
        -:   42:         */
        -:   43:        void SetFd(uv_file file) { fd = file; }
        -:   44:
        -:   45:
        -:   46:        /**
        -:   47:         * @brief
        -:   48:         * @param mode
        -:   49:         */
        -:   50:        void SetMode(const Mode& mode);
        -:   51:
        -:   52:
        -:   53:        /**
        -:   54:         * @brief get file descriptor
        -:   55:         * @return file descriptor
        -:   56:         */
        -:   57:        uv_file GetFd() const { return fd; }
        -:   58:
        -:   59:
        -:   60:        /**
        -:   61:         * @brief
        -:   62:         * @param size
        -:   63:         * @return
        -:   64:         */
        -:   65:        uv_buf_t* Next(int64_t size = 1024);
        -:   66:        bool Next(uv_buf_t* buf, int64_t size = 1024);
        -:   67:        void Begin();
        -:   68:
        -:   69:
        -:   70:        /**
        -:   71:         * @brief get size of current read buffer
        -:   72:         * @return
        -:   73:         */
        -:   74:        int64_t GetBufferSize() const { return length; };
function _ZNK12AsyncRuntime8IOStream9GetBufferEv called 1 returned 100% blocks executed 100%
        1:   75:        const char* GetBuffer() const { return buffer; };
        1:   75-block  0
        -:   76:
        -:   77:
        -:   78:        friend void FsReadCb(uv_fs_s* req);
        -:   79:        friend void NetReadCb(uv_stream_t *stream, ssize_t nread, const uv_buf_t *buf);
        -:   80:    private:
        -:   81:        uv_file                 fd;
        -:   82:        int64_t                 seek = 0;
        -:   83:        int64_t                 length = 0;
        -:   84:        int64_t                 allocated_length = 0;
        -:   85:        char*                   buffer = nullptr;
        -:   86:        bool                    allocated = false;
        -:   87:        uv_buf_t                uv_buf;
        -:   88:    };
        -:   89:
        -:   90:    typedef std::shared_ptr<IOStream>     IOStreamPtr;
        -:   91:
        -:   92:
function _ZN12AsyncRuntime10MakeStreamEv called 1 returned 100% blocks executed 100%
        1:   93:    inline IOStreamPtr MakeStream() {
        1:   94:        return std::make_shared<IOStream>();
        1:   94-block  0
call    0 returned 1
        -:   95:    }
        -:   96:
        -:   97:
function _ZN12AsyncRuntime10MakeStreamEPKcm called 1 returned 100% blocks executed 100%
        1:   98:    inline IOStreamPtr MakeStream(const char *buffer, size_t length) {
        1:   99:        return std::make_shared<IOStream>(buffer, length);
        1:   99-block  0
call    0 returned 1
        -:  100:    }
        -:  101:}
        -:  102:
        -:  103:#endif //AR_STREAM_HPP
