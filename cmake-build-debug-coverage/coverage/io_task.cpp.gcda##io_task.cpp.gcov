        -:    0:Source:/home/df/Documents/workspace/async_runtime/src/io_task.cpp
        -:    0:Graph:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/CMakeFiles/ar.dir/src/io_task.cpp.gcno
        -:    0:Data:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/CMakeFiles/ar.dir/src/io_task.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "ar/io_task.hpp"
        -:    2:
        -:    3:
        -:    4:using namespace AsyncRuntime;
        -:    5:
        -:    6:
function _ZN12AsyncRuntime10FSErrorMsgEi called 0 returned 0% blocks executed 0%
    #####:    7:const char* AsyncRuntime::FSErrorMsg(int error)
        -:    8:{
    #####:    9:    return uv_strerror(error);
    %%%%%:    9-block  0
call    0 never executed
        -:   10:}
        -:   11:
        -:   12:
function _ZN12AsyncRuntime11FSErrorNameEi called 0 returned 0% blocks executed 0%
    #####:   13:const char* AsyncRuntime::FSErrorName(int error)
        -:   14:{
    #####:   15:    return uv_err_name(error);
    %%%%%:   15-block  0
call    0 never executed
        -:   16:}
        -:   17:
        -:   18:
function _ZN12AsyncRuntime8FsOpenCbEP7uv_fs_s called 0 returned 0% blocks executed 0%
    #####:   19:void AsyncRuntime::FsOpenCb(uv_fs_s* req)
        -:   20:{
    #####:   21:    auto task = IOFsTaskCast<AsyncRuntime::IOFsOpen>(req->data);
    %%%%%:   21-block  0
call    0 never executed
    #####:   22:    const auto& stream = task->GetStream();
call    0 never executed
    #####:   23:    assert(req == task->GetRequest());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   23-block  0
call    3 never executed
    #####:   24:    assert(req->fs_type == UV_FS_OPEN);
    %%%%%:   24-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   24-block  1
call    2 never executed
        -:   25:
    #####:   26:    uv_file fd = req->result;
    #####:   27:    stream->SetFd(fd);
    %%%%%:   27-block  0
call    0 never executed
call    1 never executed
    #####:   28:    stream->Begin();
call    0 never executed
call    1 never executed
        -:   29:
    #####:   30:    if(req->result < 0) {
branch  0 never executed
branch  1 never executed
    #####:   31:        task->Resolve(req->result);
    %%%%%:   31-block  0
call    0 never executed
        -:   32:    }else{
    #####:   33:        task->Resolve(IO_SUCCESS);
    %%%%%:   33-block  0
call    0 never executed
        -:   34:    }
        -:   35:
    #####:   36:    uv_fs_req_cleanup(req);
    %%%%%:   36-block  0
call    0 never executed
    #####:   37:    assert(req->path == nullptr);
branch  0 never executed
branch  1 never executed
    %%%%%:   37-block  0
call    2 never executed
    #####:   38:    delete task;
    %%%%%:   38-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   38-block  1
call    2 never executed
    #####:   39:}
        -:   40:
        -:   41:
function _ZN12AsyncRuntime9FsCloseCbEP7uv_fs_s called 0 returned 0% blocks executed 0%
    #####:   42:void AsyncRuntime::FsCloseCb(uv_fs_s* req)
        -:   43:{
    #####:   44:    auto task = IOFsTaskCast<AsyncRuntime::IOFsClose>(req->data);
    %%%%%:   44-block  0
call    0 never executed
    #####:   45:    const auto& stream = task->GetStream();
call    0 never executed
    #####:   46:    assert(req == task->GetRequest());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   46-block  0
call    3 never executed
    #####:   47:    assert(req->fs_type == UV_FS_CLOSE);
    %%%%%:   47-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   47-block  1
call    2 never executed
        -:   48:
    #####:   49:    stream->SetFd(-1);
    %%%%%:   49-block  0
call    0 never executed
call    1 never executed
    #####:   50:    stream->Begin();
call    0 never executed
call    1 never executed
    #####:   51:    task->Resolve(IO_SUCCESS);
call    0 never executed
    #####:   52:    delete task;
branch  0 never executed
branch  1 never executed
    %%%%%:   52-block  0
call    2 never executed
    #####:   53:}
        -:   54:
        -:   55:
function _ZN12AsyncRuntime8FsReadCbEP7uv_fs_s called 0 returned 0% blocks executed 0%
    #####:   56:void AsyncRuntime::FsReadCb(uv_fs_s* req)
        -:   57:{
    #####:   58:    auto *task = IOFsTaskCast<AsyncRuntime::IOFsRead>(req->data);
    %%%%%:   58-block  0
call    0 never executed
    #####:   59:    const auto& stream = task->GetStream();
call    0 never executed
    #####:   60:    assert(req == task->GetRequest());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   60-block  0
call    3 never executed
    #####:   61:    assert(req->fs_type == UV_FS_READ);
    %%%%%:   61-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   61-block  1
call    2 never executed
        -:   62:
    #####:   63:    if (req->result == 0) {
    %%%%%:   63-block  0
branch  0 never executed
branch  1 never executed
    #####:   64:        stream->Begin();
    %%%%%:   64-block  0
call    0 never executed
call    1 never executed
    #####:   65:        task->Resolve(IO_SUCCESS);
call    0 never executed
    #####:   66:        delete task;
branch  0 never executed
branch  1 never executed
    %%%%%:   66-block  0
call    2 never executed
    #####:   67:        uv_fs_req_cleanup(req);
    %%%%%:   67-block  0
call    0 never executed
    #####:   68:    } else if (req->result < 0) {
    %%%%%:   68-block  0
branch  0 never executed
branch  1 never executed
    #####:   69:        stream->Begin();
    %%%%%:   69-block  0
call    0 never executed
call    1 never executed
    #####:   70:        task->Resolve(req->result);
call    0 never executed
    #####:   71:        delete task;
branch  0 never executed
branch  1 never executed
    %%%%%:   71-block  0
call    2 never executed
    #####:   72:        uv_fs_req_cleanup(req);
    %%%%%:   72-block  0
call    0 never executed
        -:   73:    } else {
    #####:   74:        stream->length += req->result;
    %%%%%:   74-block  0
call    0 never executed
    #####:   75:        uv_buf_t *buf = stream->Next();
call    0 never executed
call    1 never executed
    #####:   76:        uv_file fd = stream->GetFd();
call    0 never executed
call    1 never executed
        -:   77:
    #####:   78:        int offset = -1;
    #####:   79:        int seek = task->GetMethod().seek;
call    0 never executed
    #####:   80:        if(seek >= 0) {
branch  0 never executed
branch  1 never executed
    #####:   81:            offset = seek + stream->GetBufferSize();
    %%%%%:   81-block  0
call    0 never executed
call    1 never executed
        -:   82:        }
        -:   83:
    #####:   84:        uv_fs_read(req->loop, task->GetRequest(), fd, buf, 1, offset, FsReadCb);
    %%%%%:   84-block  0
call    0 never executed
call    1 never executed
        -:   85:    }
    #####:   86:}
        -:   87:
        -:   88:
function _ZN12AsyncRuntime9FsWriteCbEP7uv_fs_s called 0 returned 0% blocks executed 0%
    #####:   89:void AsyncRuntime::FsWriteCb(uv_fs_s *req)
        -:   90:{
    #####:   91:    auto task = IOFsTaskCast<AsyncRuntime::IOFsWrite>(req->data);
    %%%%%:   91-block  0
call    0 never executed
    #####:   92:    const auto& stream = task->GetStream();
call    0 never executed
    #####:   93:    assert(req == task->GetRequest());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   93-block  0
call    3 never executed
    #####:   94:    assert(req->fs_type == UV_FS_WRITE);
    %%%%%:   94-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   94-block  1
call    2 never executed
        -:   95:
    #####:   96:    if (req->result == 0) {
    %%%%%:   96-block  0
branch  0 never executed
branch  1 never executed
    #####:   97:        stream->Begin();
    %%%%%:   97-block  0
call    0 never executed
call    1 never executed
    #####:   98:        task->Resolve(IO_SUCCESS);
call    0 never executed
    #####:   99:        delete task;
branch  0 never executed
branch  1 never executed
    %%%%%:   99-block  0
call    2 never executed
    #####:  100:        uv_fs_req_cleanup(req);
    %%%%%:  100-block  0
call    0 never executed
    #####:  101:    } else if (req->result < 0) {
    %%%%%:  101-block  0
branch  0 never executed
branch  1 never executed
    #####:  102:        stream->Begin();
    %%%%%:  102-block  0
call    0 never executed
call    1 never executed
    #####:  103:        task->Resolve(req->result);
call    0 never executed
    #####:  104:        delete task;
branch  0 never executed
branch  1 never executed
    %%%%%:  104-block  0
call    2 never executed
    #####:  105:        uv_fs_req_cleanup(req);
    %%%%%:  105-block  0
call    0 never executed
        -:  106:    } else {
    #####:  107:        uv_file fd = stream->GetFd();
    %%%%%:  107-block  0
call    0 never executed
call    1 never executed
    #####:  108:        uv_buf_t *buf = stream->Next();
call    0 never executed
call    1 never executed
        -:  109:
    #####:  110:        if(buf) {
branch  0 never executed
branch  1 never executed
    #####:  111:            uv_fs_write(req->loop, task->GetRequest(), fd, buf, 1, -1, FsWriteCb);
    %%%%%:  111-block  0
call    0 never executed
call    1 never executed
        -:  112:        }else{
    #####:  113:            stream->Begin();
    %%%%%:  113-block  0
call    0 never executed
call    1 never executed
    #####:  114:            task->Resolve(IO_SUCCESS);
call    0 never executed
    #####:  115:            delete task;
branch  0 never executed
branch  1 never executed
    %%%%%:  115-block  0
call    2 never executed
    #####:  116:            uv_fs_req_cleanup(req);
    %%%%%:  116-block  0
call    0 never executed
        -:  117:        }
        -:  118:    }
    #####:  119:}
        -:  120:
        -:  121:
function _ZN12AsyncRuntime15NetConnectionCbEP11uv_stream_si called 0 returned 0% blocks executed 0%
    #####:  122:void AsyncRuntime::NetConnectionCb(uv_stream_t *server, int status)
        -:  123:{
    #####:  124:    assert(server->data != nullptr);
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  124-block  1
call    2 never executed
    #####:  125:    auto task = IONetTaskCast<AsyncRuntime::IONetListen>(server->data);
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:    auto &method = task->GetMethod();
call    0 never executed
        -:  127:
    #####:  128:    TCPSessionPtr session = std::make_shared<TCPSession>(server, method.handle_connection);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  129:    session->Accept();
    %%%%%:  129-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  130:    session->Run();
    %%%%%:  130-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  131:}
    %%%%%:  131-block  0
call    0 never executed
    $$$$$:  131-block  1
call    1 never executed
        -:  132:
        -:  133:
function _ZN12AsyncRuntime15NetConnectionCbEP12uv_connect_si called 1 returned 100% blocks executed 64%
        1:  134:void AsyncRuntime::NetConnectionCb(uv_connect_t* connection, int status)
        -:  135:{
       1*:  136:    assert(connection->data != nullptr);
        1:  136-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  136-block  1
call    2 never executed
        1:  137:    auto task = IONetTaskCast<AsyncRuntime::IONetConnect>(connection->data);
        1:  137-block  0
call    0 returned 1
        -:  138:
        1:  139:    if (status >= 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  140:        task->Resolve(IO_SUCCESS);
        1:  140-block  0
call    0 returned 1
        1:  141:        delete task;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  141-block  0
call    2 returned 1
        -:  142:    }else{
    #####:  143:        task->Resolve(status);
    %%%%%:  143-block  0
call    0 never executed
    #####:  144:        delete task;
branch  0 never executed
branch  1 never executed
    %%%%%:  144-block  0
call    2 never executed
        -:  145:    }
        1:  146:}
        -:  147:
        -:  148:
function _ZN12AsyncRuntime10NetAllocCbEP11uv_handle_smP8uv_buf_t called 1 returned 100% blocks executed 86%
        1:  149:void AsyncRuntime::NetAllocCb(uv_handle_t *handle, size_t size, uv_buf_t *buf)
        -:  150:{
       1*:  151:    assert(handle->data != nullptr);
        1:  151-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  151-block  1
call    2 never executed
        1:  152:    auto *task = IONetTaskCast<AsyncRuntime::IONetRead>(handle->data);
        1:  152-block  0
call    0 returned 1
        1:  153:    task->GetStream()->Next(buf, size);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:  154:}
        -:  155:
        -:  156:
function _ZN12AsyncRuntime9NetReadCbEP11uv_stream_slPK8uv_buf_t called 1 returned 100% blocks executed 93%
        1:  157:void AsyncRuntime::NetReadCb(uv_stream_t *stream, ssize_t nread, const uv_buf_t *buf)
        -:  158:{
       1*:  159:    assert(stream->data != nullptr);
        1:  159-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  159-block  1
call    2 never executed
        1:  160:    auto *task = IONetTaskCast<AsyncRuntime::IONetRead>(stream->data);
        1:  160-block  0
call    0 returned 1
        1:  161:    auto &io_stream = task->GetStream();
call    0 returned 1
        1:  162:    uv_read_stop(stream);
call    0 returned 1
        -:  163:
        1:  164:    if (nread >= 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  165:        io_stream->length += nread;
        1:  165-block  0
call    0 returned 1
        -:  166:    }
        -:  167://    else if (nread == UV_EOF) {
        -:  168://
        -:  169://    }
        -:  170:
        1:  171:    io_stream->Begin();
        1:  171-block  0
call    0 returned 1
call    1 returned 1
        1:  172:    task->Resolve(IO_SUCCESS);
call    0 returned 1
        1:  173:    delete task;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  173-block  0
call    2 returned 1
        1:  174:}
        -:  175:
        -:  176:
function _ZN12AsyncRuntime10NetWriteCbEP10uv_write_si called 1 returned 100% blocks executed 86%
        1:  177:void AsyncRuntime::NetWriteCb(uv_write_t* req, int status)
        -:  178:{
        1:  179:    auto task = IONetTaskCast<AsyncRuntime::IONetWrite>(req->data);
        1:  179-block  0
call    0 returned 1
       1*:  180:    assert(req->type == UV_WRITE);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  180-block  0
call    2 never executed
        1:  181:    task->Resolve(IO_SUCCESS);
        1:  181-block  0
call    0 returned 1
        1:  182:    delete task;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  182-block  0
call    2 returned 1
        1:  183:    free(req);
        1:  184:}
        -:  185:
        -:  186:
function _ZN12AsyncRuntime10NetCloseCbEP11uv_handle_s called 1 returned 100% blocks executed 86%
        1:  187:void AsyncRuntime::NetCloseCb(uv_handle_t* handle)
        -:  188:{
       1*:  189:    assert(handle->data != nullptr);
        1:  189-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  189-block  1
call    2 never executed
        1:  190:    auto *task = IONetTaskCast<AsyncRuntime::IONetClose>(handle->data);
        1:  190-block  0
call    0 returned 1
        1:  191:    task->Resolve(IO_SUCCESS);
call    0 returned 1
        1:  192:    delete task;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  192-block  0
call    2 returned 1
        1:  193:}
        -:  194:
        -:  195:
function _ZN12AsyncRuntime13NetAddrInfoCbEP16uv_getaddrinfo_siP8addrinfo called 0 returned 0% blocks executed 0%
    #####:  196:void AsyncRuntime::NetAddrInfoCb(uv_getaddrinfo_t* req, int status, struct addrinfo* res)
        -:  197:{
    #####:  198:    assert(req->data != nullptr);
    %%%%%:  198-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  198-block  1
call    2 never executed
    #####:  199:    auto task = IONetTaskCast<AsyncRuntime::IONetAddrInfo>(req->data);
    %%%%%:  199-block  0
call    0 never executed
        -:  200:
    #####:  201:    if (status >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  202:        char addr[17] = {'\0'};
    #####:  203:        uv_ip4_name((struct sockaddr_in*) res->ai_addr, addr, 16);
    %%%%%:  203-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  204:        task->GetInfo()->hostname = std::string {addr};
    %%%%%:  204-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  204-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  204-block  2
call    9 never executed
    $$$$$:  204-block  3
    #####:  205:        task->Resolve(IO_SUCCESS);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  206:        delete task;
    %%%%%:  206-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  206-block  1
call    2 never executed
        -:  207:    }else{
    #####:  208:        task->Resolve(status);
    %%%%%:  208-block  0
call    0 never executed
    #####:  209:        delete task;
branch  0 never executed
branch  1 never executed
    %%%%%:  209-block  0
call    2 never executed
        -:  210:    }
    #####:  211:}
    %%%%%:  211-block  0
