        -:    0:Source:/home/df/Documents/workspace/async_runtime/include/ar/task.hpp
        -:    0:Graph:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/examples/CMakeFiles/tcp_client.dir/tcp_client.cpp.gcno
        -:    0:Data:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/examples/CMakeFiles/tcp_client.dir/tcp_client.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef AR_TASK_H
        -:    2:#define AR_TASK_H
        -:    3:
        -:    4:#include <iostream>
        -:    5:#include <future>
        -:    6:#include <functional>
        -:    7:#include <typeinfo>
        -:    8:#include <cstdio>
        -:    9:#include <utility>
        -:   10:#include <atomic>
        -:   11:
        -:   12:#include "ar/helper.hpp"
        -:   13:#include "ar/object.hpp"
        -:   14:
        -:   15:
        -:   16:namespace AsyncRuntime {
        -:   17:    class Task;
        -:   18:    class Processor;
        -:   19:    class IExecutor;
        -:   20:
        -:   21:
        -:   22:    /**
        -:   23:     * @class
        -:   24:     * @brief
        -:   25:     */
        -:   26:    template<class Ret>
        -:   27:    class Result
        -:   28:    {
        -:   29:        friend class runtime;
        -:   30:    public:
        -:   31:        typedef std::function<void(void*)> resume_cb_t;
        -:   32:        typedef Ret RetType;
        -:   33:
       11:   34:        explicit Result() : excepted(false) {
       11:   35:            resolved.store(false, std::memory_order_relaxed);
       11:   36:            future = promise.get_future();
       11:   37:        };
------------------
_ZN12AsyncRuntime6ResultIvEC2Ev:
function _ZN12AsyncRuntime6ResultIvEC2Ev called 5 returned 100% blocks executed 67%
        5:   34:        explicit Result() : excepted(false) {
        5:   34-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
        5:   34-block  1
call    5 returned 5
        5:   35:            resolved.store(false, std::memory_order_relaxed);
call    0 returned 5
        5:   36:            future = promise.get_future();
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   36-block  0
call    3 returned 5
call    4 returned 5
        5:   37:        };
    $$$$$:   37-block  0
call    0 never executed
    $$$$$:   37-block  1
call    1 never executed
    $$$$$:   37-block  2
call    2 never executed
------------------
_ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
function _ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev called 2 returned 100% blocks executed 67%
        2:   34:        explicit Result() : excepted(false) {
        2:   34-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:   34-block  1
call    5 returned 2
        2:   35:            resolved.store(false, std::memory_order_relaxed);
call    0 returned 2
        2:   36:            future = promise.get_future();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   36-block  0
call    3 returned 2
call    4 returned 2
        2:   37:        };
    $$$$$:   37-block  0
call    0 never executed
    $$$$$:   37-block  1
call    1 never executed
    $$$$$:   37-block  2
call    2 never executed
------------------
_ZN12AsyncRuntime6ResultIiEC2Ev:
function _ZN12AsyncRuntime6ResultIiEC2Ev called 4 returned 100% blocks executed 67%
        4:   34:        explicit Result() : excepted(false) {
        4:   34-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        4:   34-block  1
call    5 returned 4
        4:   35:            resolved.store(false, std::memory_order_relaxed);
call    0 returned 4
        4:   36:            future = promise.get_future();
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   36-block  0
call    3 returned 4
call    4 returned 4
        4:   37:        };
    $$$$$:   37-block  0
call    0 never executed
    $$$$$:   37-block  1
call    1 never executed
    $$$$$:   37-block  2
call    2 never executed
------------------
        -:   38:
        -:   39:
        -:   40:        template<typename T>
        -:   41:        explicit Result(T && v) : excepted(false) {
        -:   42:            resolved.store(true, std::memory_order_relaxed);
        -:   43:            future = promise.get_future();
        -:   44:            promise.set_value(v);
        -:   45:        };
        -:   46:
        -:   47:
        -:   48:        Result(const Result& other) = delete;
        -:   49:        Result& operator =(const Result& other) = delete;
        -:   50:        Result(Result&& other) = delete;
        -:   51:        Result& operator =(Result&& other) = delete;
        -:   52:
        -:   53:
       11:   54:        ~Result() = default;
------------------
_ZN12AsyncRuntime6ResultIvED2Ev:
function _ZN12AsyncRuntime6ResultIvED2Ev called 5 returned 100% blocks executed 100%
        5:   54:        ~Result() = default;
        5:   54-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
------------------
_ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 2 returned 100% blocks executed 100%
        2:   54:        ~Result() = default;
        2:   54-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
------------------
_ZN12AsyncRuntime6ResultIiED2Ev:
function _ZN12AsyncRuntime6ResultIiED2Ev called 4 returned 100% blocks executed 100%
        4:   54:        ~Result() = default;
        4:   54-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
------------------
        -:   55:
        -:   56:
        -:   57:        /**
        -:   58:         * @brief
        -:   59:         * @param function
        -:   60:         */
function _ZN12AsyncRuntime6ResultIiE4ThenERKSt8functionIFvPvEES3_ called 4 returned 100% blocks executed 75%
        4:   61:        bool Then(const resume_cb_t& cb, void* opaque = nullptr) {
        4:   62:            std::lock_guard<std::mutex>   lock(resolve_mutex);
        4:   62-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   63:            if(!resolved.load(std::memory_order_relaxed)) {
        4:   63-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:   64:                completed_opaque = opaque;
        4:   65:                completed_cb = cb;
        4:   65-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   66:                return true;
        4:   66-block  0
        -:   67:            }else{
    #####:   68:                return false;
    %%%%%:   68-block  0
        -:   69:            }
        4:   70:        }
        4:   70-block  0
call    0 returned 4
    $$$$$:   70-block  1
call    1 never executed
        -:   71:
        -:   72:
        -:   73:        /**
        -:   74:         * @brief
        -:   75:         */
       1*:   76:        Result<Ret>* Wait() {
       1*:   77:            if(!resolved.load(std::memory_order_relaxed)) {
       1*:   78:                if (future.valid())
       1*:   79:                    future.wait();
        -:   80:            }
        -:   81:
       1*:   82:            return this;
        -:   83:        }
------------------
_ZN12AsyncRuntime6ResultIiE4WaitEv:
function _ZN12AsyncRuntime6ResultIiE4WaitEv called 0 returned 0% blocks executed 0%
    #####:   76:        Result<Ret>* Wait() {
    #####:   77:            if(!resolved.load(std::memory_order_relaxed)) {
    %%%%%:   77-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:                if (future.valid())
    %%%%%:   78-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:                    future.wait();
    %%%%%:   79-block  0
call    0 never executed
        -:   80:            }
        -:   81:
    #####:   82:            return this;
    %%%%%:   82-block  0
        -:   83:        }
------------------
_ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4WaitEv:
function _ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4WaitEv called 1 returned 100% blocks executed 100%
        1:   76:        Result<Ret>* Wait() {
        1:   77:            if(!resolved.load(std::memory_order_relaxed)) {
        1:   77-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   78:                if (future.valid())
        1:   78-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   79:                    future.wait();
        1:   79-block  0
call    0 returned 1
        -:   80:            }
        -:   81:
        1:   82:            return this;
        1:   82-block  0
        -:   83:        }
------------------
        -:   84:
        -:   85:
        -:   86:        /**
        -:   87:         * @brief
        -:   88:         * @param v
        -:   89:         */
        -:   90:        template<typename T>
        6:   91:        void SetValue(T && v) {
        6:   92:            std::lock_guard<std::mutex>   lock(resolve_mutex);
        6:   93:            resolved.store(true, std::memory_order_relaxed);
        -:   94:
        6:   95:            if(!excepted) {
        6:   96:                promise.set_value(v);
        -:   97:
        6:   98:                if (completed_cb)
       4*:   99:                    completed_cb(completed_opaque);
        -:  100:
        6:  101:                completed_cb = nullptr;
        -:  102:            }
        6:  103:        }
------------------
_ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8SetValueIRS6_EEvOT_:
function _ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8SetValueIRS6_EEvOT_ called 2 returned 100% blocks executed 77%
        2:   91:        void SetValue(T && v) {
        2:   92:            std::lock_guard<std::mutex>   lock(resolve_mutex);
        2:   92-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   93:            resolved.store(true, std::memory_order_relaxed);
        2:   93-block  0
call    0 returned 2
        -:   94:
        2:   95:            if(!excepted) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   96:                promise.set_value(v);
        2:   96-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   97:
        2:   98:                if (completed_cb)
        2:   98-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:   99:                    completed_cb(completed_opaque);
    %%%%%:   99-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  100:
        2:  101:                completed_cb = nullptr;
        2:  101-block  0
call    0 returned 2
        -:  102:            }
        2:  103:        }
        2:  103-block  0
call    0 returned 2
    $$$$$:  103-block  1
call    1 never executed
------------------
_ZN12AsyncRuntime6ResultIiE8SetValueIRiEEvOT_:
function _ZN12AsyncRuntime6ResultIiE8SetValueIRiEEvOT_ called 4 returned 100% blocks executed 85%
        4:   91:        void SetValue(T && v) {
        4:   92:            std::lock_guard<std::mutex>   lock(resolve_mutex);
        4:   92-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   93:            resolved.store(true, std::memory_order_relaxed);
        4:   93-block  0
call    0 returned 4
        -:   94:
        4:   95:            if(!excepted) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   96:                promise.set_value(v);
        4:   96-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:   97:
        4:   98:                if (completed_cb)
        4:   98-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:   99:                    completed_cb(completed_opaque);
        4:   99-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:  100:
        4:  101:                completed_cb = nullptr;
        4:  101-block  0
call    0 returned 4
        -:  102:            }
        4:  103:        }
        4:  103-block  0
call    0 returned 4
    $$$$$:  103-block  1
call    1 never executed
------------------
        -:  104:
        -:  105:
        -:  106:        /**
        -:  107:         * @brief
        -:  108:         * @param v
        -:  109:         */
function _ZN12AsyncRuntime6ResultIvE8SetValueEv called 5 returned 100% blocks executed 77%
        5:  110:        void SetValue() {
        5:  111:            std::lock_guard<std::mutex>   lock(resolve_mutex);
        5:  111-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  112:            resolved.store(true, std::memory_order_relaxed);
        5:  112-block  0
call    0 returned 5
        -:  113:
        5:  114:            if(!excepted) {
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  115:                promise.set_value();
        5:  115-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:  116:
        5:  117:                if (completed_cb)
        5:  117-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    #####:  118:                    completed_cb(completed_opaque);
    %%%%%:  118-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  119:
        5:  120:                completed_cb = nullptr;
        5:  120-block  0
call    0 returned 5
        -:  121:            }
        5:  122:        }
        5:  122-block  0
call    0 returned 5
    $$$$$:  122-block  1
call    1 never executed
        -:  123:
        -:  124:
        -:  125:        /**
        -:  126:         * @brief
        -:  127:         * @param __p
        -:  128:         */
    #####:  129:        void SetException(std::exception_ptr e) {
    #####:  130:            std::lock_guard<std::mutex>   lock(resolve_mutex);
    #####:  131:            resolved.store(true, std::memory_order_relaxed);
    #####:  132:            promise.set_exception(e);
    #####:  133:            excepted = true;
    #####:  134:        }
------------------
_ZN12AsyncRuntime6ResultIvE12SetExceptionENSt15__exception_ptr13exception_ptrE:
function _ZN12AsyncRuntime6ResultIvE12SetExceptionENSt15__exception_ptr13exception_ptrE called 0 returned 0% blocks executed 0%
    #####:  129:        void SetException(std::exception_ptr e) {
    #####:  130:            std::lock_guard<std::mutex>   lock(resolve_mutex);
    %%%%%:  130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  131:            resolved.store(true, std::memory_order_relaxed);
    %%%%%:  131-block  0
call    0 never executed
    #####:  132:            promise.set_exception(e);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  132-block  0
call    4 never executed
    $$$$$:  132-block  1
call    5 never executed
    $$$$$:  132-block  2
    #####:  133:            excepted = true;
    #####:  134:        }
call    0 never executed
    $$$$$:  134-block  0
call    1 never executed
------------------
_ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE12SetExceptionENSt15__exception_ptr13exception_ptrE:
function _ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE12SetExceptionENSt15__exception_ptr13exception_ptrE called 0 returned 0% blocks executed 0%
    #####:  129:        void SetException(std::exception_ptr e) {
    #####:  130:            std::lock_guard<std::mutex>   lock(resolve_mutex);
    %%%%%:  130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  131:            resolved.store(true, std::memory_order_relaxed);
    %%%%%:  131-block  0
call    0 never executed
    #####:  132:            promise.set_exception(e);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  132-block  0
call    4 never executed
    $$$$$:  132-block  1
call    5 never executed
    $$$$$:  132-block  2
    #####:  133:            excepted = true;
    #####:  134:        }
call    0 never executed
    $$$$$:  134-block  0
call    1 never executed
------------------
        -:  135:
        -:  136:
        -:  137:        /**
        -:  138:         * @brief
        -:  139:         * @return
        -:  140:         */
        5:  141:        Ret Get() {
        5:  142:            if(future.valid()) {
        5:  143:                return future.get();
        -:  144:            } else {
    #####:  145:                throw std::runtime_error("invalid future");
        -:  146:            }
        -:  147:        }
------------------
_ZN12AsyncRuntime6ResultIiE3GetEv:
function _ZN12AsyncRuntime6ResultIiE3GetEv called 4 returned 100% blocks executed 60%
        4:  141:        Ret Get() {
        4:  142:            if(future.valid()) {
        4:  142-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:  143:                return future.get();
        4:  143-block  0
call    0 returned 4
        4:  143-block  1
        -:  144:            } else {
    #####:  145:                throw std::runtime_error("invalid future");
    %%%%%:  145-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  145-block  1
call    4 never executed
    $$$$$:  145-block  2
call    5 never executed
        -:  146:            }
        -:  147:        }
------------------
_ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3GetEv:
function _ZN12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3GetEv called 1 returned 100% blocks executed 56%
        1:  141:        Ret Get() {
        1:  142:            if(future.valid()) {
        1:  142-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  143:                return future.get();
        1:  143-block  0
call    0 returned 1
        -:  144:            } else {
    #####:  145:                throw std::runtime_error("invalid future");
    %%%%%:  145-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  145-block  1
call    4 never executed
    $$$$$:  145-block  2
call    5 never executed
        -:  146:            }
        -:  147:        }
------------------
        -:  148:
        -:  149:
        -:  150:        /**
        -:  151:         * @brief
        -:  152:         * @return
        -:  153:         */
        -:  154:        bool Valid() const { return future.valid(); }
        -:  155:
        -:  156:
        -:  157:        /**
        -:  158:         * @brief
        -:  159:         * @return
        -:  160:         */
function _ZNK12AsyncRuntime6ResultINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8ResolvedEv called 1 returned 100% blocks executed 100%
        1:  161:        bool Resolved() const {
        1:  162:            bool res = resolved.load(std::memory_order_relaxed);
        1:  162-block  0
call    0 returned 1
        1:  163:            return res;
        -:  164:        }
        -:  165:    protected:
        -:  166:        std::future<Ret>                    future;
        -:  167:        resume_cb_t                         completed_cb;
        -:  168:        void*                               completed_opaque;
        -:  169:        std::promise<Ret>                   promise;
        -:  170:        std::atomic_bool                    resolved;
        -:  171:        std::mutex                          resolve_mutex;
        -:  172:        bool                                excepted;
        -:  173:    };
        -:  174:
        -:  175:
        -:  176:    /**
        -:  177:     * @brief
        -:  178:     */
        -:  179:    struct ExecutorState {
        -:  180:        IExecutor*  executor = nullptr;
        -:  181:        Processor*  processor = nullptr;
        -:  182:        void*       data = nullptr;
        -:  183:    };
        -:  184:
        -:  185:
        -:  186:    /**
        -:  187:     * @class TaskImplBase
        -:  188:     * @brief Task interface
        -:  189:     */
        -:  190:    class Task
        -:  191:    {
        -:  192:        friend class runtime;
        -:  193:    public:
function _ZN12AsyncRuntime4TaskC2Ev called 9 returned 100% blocks executed 100%
        9:  194:        Task() = default;
        9:  194-block  0
call    0 returned 9
call    1 returned 9
       9*:  195:        virtual ~Task() = default;
------------------
_ZN12AsyncRuntime4TaskD0Ev:
function _ZN12AsyncRuntime4TaskD0Ev called 0 returned 0% blocks executed 0%
    #####:  195:        virtual ~Task() = default;
    %%%%%:  195-block  0
call    0 never executed
call    1 never executed
------------------
_ZN12AsyncRuntime4TaskD2Ev:
function _ZN12AsyncRuntime4TaskD2Ev called 9 returned 100% blocks executed 100%
        9:  195:        virtual ~Task() = default;
------------------
        -:  196:        virtual void Execute(const ExecutorState& executor = ExecutorState()) = 0;
        -:  197:
        -:  198:
function _ZN12AsyncRuntime4Task20SetDesirableExecutorERKNS_13ExecutorStateE called 5 returned 100% blocks executed 100%
        5:  199:        void SetDesirableExecutor(const ExecutorState& executor_) { desirable_executor = executor_; }
        -:  200:        const ExecutorState& GetDesirableExecutor() const { return desirable_executor; }
        -:  201:    protected:
        -:  202:        ExecutorState executor;
        -:  203:        ExecutorState desirable_executor;
        -:  204:    };
        -:  205:
        -:  206:
        -:  207:    /**
        -:  208:     * @class Task
        -:  209:     * @brief Task container
        -:  210:     */
        -:  211:    template < class Callable  >
        -:  212:    class TaskImpl : public Task
        -:  213:    {
        -:  214:        typedef typename std::result_of<Callable(const ExecutorState&)>::type return_type;
        -:  215:    public:
function _ZN12AsyncRuntime8TaskImplISt5_BindIFMNS_13BaseCoroutineINS_19BasicFixedSizeStackINS_11StackTraitsEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEFvRKNS_13ExecutorStateEEPSC_St12_PlaceholderILi1EEEEEC2EOSM_ called 5 returned 100% blocks executed 67%
        5:  216:        explicit TaskImpl(Callable&& f) :
        -:  217:                Task(),
        5:  218:                fn(f),
        5:  219:                result(new Result<return_type>() ){ };
        5:  219-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5:  219-block  1
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:  219-block  2
call    7 returned 5
branch  8 taken 5 (fallthrough)
branch  9 taken 0 (throw)
        5:  219-block  3
    $$$$$:  219-block  4
call   10 never executed
    $$$$$:  219-block  5
call   11 never executed
        -:  220:
       10:  221:        ~TaskImpl() override = default;
------------------
_ZN12AsyncRuntime8TaskImplISt5_BindIFMNS_13BaseCoroutineINS_19BasicFixedSizeStackINS_11StackTraitsEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEFvRKNS_13ExecutorStateEEPSC_St12_PlaceholderILi1EEEEED0Ev:
function _ZN12AsyncRuntime8TaskImplISt5_BindIFMNS_13BaseCoroutineINS_19BasicFixedSizeStackINS_11StackTraitsEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEFvRKNS_13ExecutorStateEEPSC_St12_PlaceholderILi1EEEEED0Ev called 5 returned 100% blocks executed 100%
        5:  221:        ~TaskImpl() override = default;
        5:  221-block  0
call    0 returned 5
call    1 returned 5
------------------
_ZN12AsyncRuntime8TaskImplISt5_BindIFMNS_13BaseCoroutineINS_19BasicFixedSizeStackINS_11StackTraitsEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEFvRKNS_13ExecutorStateEEPSC_St12_PlaceholderILi1EEEEED2Ev:
function _ZN12AsyncRuntime8TaskImplISt5_BindIFMNS_13BaseCoroutineINS_19BasicFixedSizeStackINS_11StackTraitsEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEFvRKNS_13ExecutorStateEEPSC_St12_PlaceholderILi1EEEEED2Ev called 5 returned 100% blocks executed 100%
        5:  221:        ~TaskImpl() override = default;
        5:  221-block  0
call    0 returned 5
call    1 returned 5
------------------
        -:  222:
        -:  223:
function _ZN12AsyncRuntime8TaskImplISt5_BindIFMNS_13BaseCoroutineINS_19BasicFixedSizeStackINS_11StackTraitsEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEFvRKNS_13ExecutorStateEEPSC_St12_PlaceholderILi1EEEEE7ExecuteESF_ called 5 returned 100% blocks executed 21%
        5:  224:        void Execute(const ExecutorState& executor_) override {
        -:  225:            try {
        5:  226:                executor = executor_;
        5:  227:                Handle(result.get(), fn);
        5:  227-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
    =====:  228:            } catch(...) {
    $$$$$:  228-block  0
    $$$$$:  228-block  1
call    0 never executed
    $$$$$:  228-block  2
call    1 never executed
    $$$$$:  228-block  3
call    2 never executed
        -:  229:                try {
    =====:  230:                    result->SetException(std::current_exception());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  230-block  0
call    5 never executed
    $$$$$:  230-block  1
call    6 never executed
    $$$$$:  230-block  2
    =====:  231:                } catch(...) { }
    $$$$$:  231-block  0
    $$$$$:  231-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  232:            }
        5:  233:        }
        5:  233-block  0
        -:  234:
        -:  235:
        -:  236:        std::shared_ptr<Result<return_type>> GetResult() {
        -:  237:            return result;
        -:  238:        }
        -:  239:    private:
        -:  240:        /**
        -:  241:         * @brief handle non-void here
        -:  242:         * @tparam F
        -:  243:         * @tparam R
        -:  244:         * @param p
        -:  245:         * @param f
        -:  246:         */
        -:  247:        template<typename F, typename R>
        -:  248:        void Handle(Result<R>* r, F && f)
        -:  249:        {
        -:  250:            auto res = f(executor);
        -:  251:            r->SetValue(res);
        -:  252:        }
        -:  253:
        -:  254:
        -:  255:        /**
        -:  256:         * @class handle void here
        -:  257:         * @tparam F
        -:  258:         * @param p
        -:  259:         * @param f
        -:  260:         */
        -:  261:        template<typename F>
function _ZN12AsyncRuntime8TaskImplISt5_BindIFMNS_13BaseCoroutineINS_19BasicFixedSizeStackINS_11StackTraitsEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEFvRKNS_13ExecutorStateEEPSC_St12_PlaceholderILi1EEEEE6HandleIRSM_EEvPNS_6ResultIvEEOT_ called 5 returned 100% blocks executed 100%
        5:  262:        void Handle(Result<void>* r, F && f)
        -:  263:        {
        5:  264:            f(executor);
        5:  264-block  0
call    0 returned 5
        5:  265:            r->SetValue();
call    0 returned 5
        5:  266:        }
        -:  267:
        -:  268:
        -:  269:        Callable                                                        fn;
        -:  270:        std::shared_ptr<Result<return_type>>                            result;
        -:  271:    };
        -:  272:
        -:  273:
        -:  274:    /**
        -:  275:     * @brief
        -:  276:     * @tparam Callable
        -:  277:     * @param f
        -:  278:     * @return
        -:  279:     */
        -:  280:    template<class Fn>
function _ZN12AsyncRuntime8MakeTaskISt5_BindIFMNS_13BaseCoroutineINS_19BasicFixedSizeStackINS_11StackTraitsEEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEFvRKNS_13ExecutorStateEEPSC_St12_PlaceholderILi1EEEEEEPNS_8TaskImplIT_EEOSO_ called 5 returned 100% blocks executed 86%
        5:  281:    inline TaskImpl<Fn>* MakeTask(Fn &&f) {
        5:  282:        return new TaskImpl(std::forward<Fn>(f));
        5:  282-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
        5:  282-block  1
        5:  282-block  2
    $$$$$:  282-block  3
call    5 never executed
        -:  283:    }
        -:  284:
        -:  285:
        -:  286:    typedef std::shared_ptr<Result<void>>   ResultVoidPtr;
        -:  287:}
        -:  288:
        -:  289:
        -:  290:#endif //AR_TASK_H
