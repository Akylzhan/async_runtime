        -:    0:Source:/home/df/Documents/workspace/async_runtime/include/ar/array.hpp
        -:    0:Graph:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/CMakeFiles/ar.dir/src/processor.cpp.gcno
        -:    0:Data:/home/df/Documents/workspace/async_runtime/cmake-build-debug-coverage/CMakeFiles/ar.dir/src/processor.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef AR_ARRAY_H
        -:    2:#define AR_ARRAY_H
        -:    3:
        -:    4:#include <atomic>
        -:    5:#include <vector>
        -:    6:#include <cassert>
        -:    7:#include <cstdint>
        -:    8:#include <cstddef>
        -:    9:#include <cstdlib>
        -:   10:#include <optional>
        -:   11:
        -:   12:
        -:   13:namespace AsyncRuntime {
        -:   14:
        -:   15:
        -:   16:    /**
        -:   17:     * @struct Array
        -:   18:     * @brief Lock-free array
        -:   19:     */
        -:   20:    template<typename T>
        -:   21:    struct AtomicArray {
        -:   22:        int64_t C;
        -:   23:        int64_t M;
        -:   24:        std::atomic_size_t U;
        -:   25:        std::atomic<T> *S;
        -:   26:
        -:   27:
function _ZN12AsyncRuntime11AtomicArrayIPNS_4TaskEEC2El called 0 returned 0% blocks executed 0%
    #####:   28:        explicit AtomicArray(int64_t c) :
    #####:   29:                C{c},
    #####:   30:                M{c - 1},
    #####:   31:                U{0},
    %%%%%:   31-block  0
call    0 never executed
    #####:   32:                S{new std::atomic<T>[static_cast<size_t>(C)]} {
branch  0 never executed
branch  1 never executed
    %%%%%:   32-block  0
    %%%%%:   32-block  1
call    2 never executed
    %%%%%:   32-block  2
call    3 never executed
    %%%%%:   32-block  3
    %%%%%:   32-block  4
branch  4 never executed
branch  5 never executed
    #####:   33:        }
        -:   34:
        -:   35:
function _ZN12AsyncRuntime11AtomicArrayIPNS_4TaskEED2Ev called 0 returned 0% blocks executed 0%
    #####:   36:        ~AtomicArray() {
    #####:   37:            delete[] S;
    %%%%%:   37-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   37-block  1
call    2 never executed
    #####:   38:        }
        -:   39:
        -:   40:
function _ZNK12AsyncRuntime11AtomicArrayIPNS_4TaskEE8capacityEv called 0 returned 0% blocks executed 0%
    #####:   41:        int64_t capacity() const noexcept {
    #####:   42:            return C;
    %%%%%:   42-block  0
        -:   43:        }
        -:   44:
        -:   45:
        -:   46:        size_t size() const noexcept {
        -:   47:            return U.load(std::memory_order_relaxed);
        -:   48:        }
        -:   49:
        -:   50:
        -:   51:        template<typename O>
    #####:   52:        void store(int64_t i, O &&o) {
    #####:   53:            S[i & M].store(std::forward<O>(o), std::memory_order_relaxed);
    #####:   54:            U.fetch_add(1, std::memory_order_relaxed);
    #####:   55:        }
------------------
_ZN12AsyncRuntime11AtomicArrayIPNS_4TaskEE5storeIS2_EEvlOT_:
function _ZN12AsyncRuntime11AtomicArrayIPNS_4TaskEE5storeIS2_EEvlOT_ called 0 returned 0% blocks executed 0%
    #####:   52:        void store(int64_t i, O &&o) {
    #####:   53:            S[i & M].store(std::forward<O>(o), std::memory_order_relaxed);
    %%%%%:   53-block  0
call    0 never executed
call    1 never executed
    #####:   54:            U.fetch_add(1, std::memory_order_relaxed);
    #####:   55:        }
------------------
_ZN12AsyncRuntime11AtomicArrayIPNS_4TaskEE5storeIRS2_EEvlOT_:
function _ZN12AsyncRuntime11AtomicArrayIPNS_4TaskEE5storeIRS2_EEvlOT_ called 0 returned 0% blocks executed 0%
    #####:   52:        void store(int64_t i, O &&o) {
    #####:   53:            S[i & M].store(std::forward<O>(o), std::memory_order_relaxed);
    %%%%%:   53-block  0
call    0 never executed
call    1 never executed
    #####:   54:            U.fetch_add(1, std::memory_order_relaxed);
    #####:   55:        }
------------------
        -:   56:
        -:   57:
function _ZN12AsyncRuntime11AtomicArrayIPNS_4TaskEE4loadEl called 0 returned 0% blocks executed 0%
    #####:   58:        T load(int64_t i) noexcept {
    #####:   59:            return S[i & M].load(std::memory_order_relaxed);
    %%%%%:   59-block  0
call    0 never executed
        -:   60:        }
        -:   61:
        -:   62:
        -:   63:        T operator [](int64_t i) noexcept {
        -:   64:            return S[i & M].load(std::memory_order_relaxed);
        -:   65:        }
        -:   66:
        -:   67:
function _ZN12AsyncRuntime11AtomicArrayIPNS_4TaskEE6resizeEll called 0 returned 0% blocks executed 0%
    #####:   68:        AtomicArray *resize(int64_t b, int64_t t) {
    #####:   69:            auto *ptr = new AtomicArray{2 * C};
    %%%%%:   69-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:   69-block  1
call    4 never executed
    #####:   70:            for (int64_t i = t; i != b; ++i) {
    %%%%%:   70-block  0
    %%%%%:   70-block  1
branch  0 never executed
branch  1 never executed
    #####:   71:                ptr->store(i, load(i));
    %%%%%:   71-block  0
call    0 never executed
call    1 never executed
        -:   72:            }
    #####:   73:            return ptr;
    %%%%%:   73-block  0
    %%%%%:   73-block  1
        -:   74:        }
        -:   75:    };
        -:   76:}
        -:   77:
        -:   78:#endif //AR_ARRAY_H
